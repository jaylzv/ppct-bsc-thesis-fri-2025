import { ExtensionType, EXTENSIONS } from "./types";

/**
 * Generates all possible combinations of `ExtensionType` from the `EXTENSIONS` array.
 *
 * This function creates an array of arrays, where each inner array represents a unique combination
 * of `ExtensionType` values. The combinations are generated by recursively building up combinations
 * starting from an empty prefix and adding each extension one by one.
 *
 * @returns {ReadonlyArray<ReadonlyArray<ExtensionType>>} A read-only array containing all possible
 * combinations of `ExtensionType` values.
 */
const getExtensionCombinations = (): ReadonlyArray<
  ReadonlyArray<ExtensionType>
> => {
  const combinations: ExtensionType[][] = [];

  const generateCombinations = (prefix: ExtensionType[], start: number) => {
    for (let i = start; i < EXTENSIONS.length; i++) {
      const newCombination = [...prefix, EXTENSIONS[i]];
      combinations.push(newCombination);
      generateCombinations(newCombination, i + 1);
    }
  };

  generateCombinations([], 0);

  return combinations;
};

export { getExtensionCombinations };
