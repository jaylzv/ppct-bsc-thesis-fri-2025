import { LINK_DECORATORS, LinkDecoratorType } from "./types";

/**
 * Generates all possible combinations of link decorators.
 *
 * This function creates an array of arrays, where each inner array represents
 * a unique combination of `LinkDecoratorType` elements. The combinations are
 * generated by recursively adding each `LinkDecoratorType` to the current
 * prefix and then continuing to generate combinations from the next element.
 *
 * @returns {ReadonlyArray<ReadonlyArray<LinkDecoratorType>>} An array of arrays,
 * each containing a unique combination of `LinkDecoratorType` elements.
 */
const getLinkDecoratorCombinations = (): ReadonlyArray<
  ReadonlyArray<LinkDecoratorType>
> => {
  const combinations: LinkDecoratorType[][] = [];

  const generateCombinations = (prefix: LinkDecoratorType[], start: number) => {
    for (let i = start; i < LINK_DECORATORS.length; i++) {
      const newCombination = [...prefix, LINK_DECORATORS[i]];
      combinations.push(newCombination);
      generateCombinations(newCombination, i + 1);
    }
  };

  generateCombinations([], 0);

  return combinations;
};

export { getLinkDecoratorCombinations };
